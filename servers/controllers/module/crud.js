import boom from 'boom';
import Sequelize from 'sequelize';
import db from '../../utils/db';
import utils from '../';
import _ from 'lodash';

export const getType = (attr) => {
    let ret = {},
        form = {};

    switch (attr.type.constructor) {
        case Sequelize.DataTypes.STRING:
        case Sequelize.DataTypes.TEXT:
            ret = {
                type: "string",
                title: attr.field
            };
            form = {
                key: attr.field,
                type: "text"
            }
            break;
        case Sequelize.DataTypes.BOOLEAN:
            ret = {
                type: "string",
                title: attr.field
            };
            form = {
                key: attr.field,
                type: "checkbox"
            };
            break;
        case Sequelize.DataTypes.INTEGER:
            ret = {
                type: "number",
                title: attr.field
            };
            form = {
                key: attr.field,
                type: "number"
            };
            break;
    }

    return {
        data: ret,
        form: form
    };
}

export default (sequelizeModel) => {
    return async(ctx, next) => {
        let trans = await db.sequelize.transaction();
        let body = ctx.request.body;

        if (typeof body !== "object" || !body.key) {
            throw boom.badData('数据没有填写完整!');
        }

        sequelizeModel = db.models[body.key]

        if (!sequelizeModel) {
            throw boom.badData(`找不到id:${body.key}的模型!`);
        }

        let schamaData = {
            type: "object",
            required: [],
            properties: {}
        };
        let schemaFormAdd = [];
        let schemaFormEdit = [];
        let columns = [];

        _.forEach(sequelizeModel.attributes, (attr, key) => {
            if (!attr.primary && !attr._autoGenerated && (attr.unique || !attr.allowNull)) {
                schamaData.required.push(key);
            }
            if (!attr.primary && !attr._autoGenerated) {
                schamaData.properties[key] = getType(attr).data;
                schemaFormAdd.push(getType(attr).form);
                schemaFormEdit.push(getType(attr).form);
            }

            columns.push({
                "content": `<span>{{ ::item.${key} }}</span>`,
                "title": key,
                "name": key,
                "sort": ""
            });

        });

        let interface1 = {
            "jpp": { "set": [{ "from": "/rows", "to": "/rows" }, { "from": "/total", "to": "/count" }], "del": ["/id"] },
            "idFieldPath": ["/id"],
            "key": body.key,
            "group": body.key,
            "protocol": "http",
            "path": body.key + "s",
            "description": `${body.title}CRUD接口`,
            "isRestful": true
        };

        let listAction = {
            "itemActions": [{ "key": `${body.key}EditAction` }, { "key": `${body.key}DeleteAction` }],
            "actions": [`${body.key}AddAction`],
            "list": {
                "showPagination": true,
                "showSearchBtn": false,
                "showRefreshBtn": true,
                "showSearchPanel": false,
                "columns": columns,
                "queryData": { "limit": 10 },
                "searchActionKey": `${body.key}SearchAction`
            },
            "interfaces": [{
                "key": interface1.key,
                "method": 0,
                "idFieldPath": [],
                "path": interface1.path,
                "isRestful": true,
                "description": interface1.description,
                "jpp": interface1.jpp
            }],
            "key": body.key,
            "type": 1,
            "icon": "apps",
            "title": body.title,
            "refreshList": false,
            "closeDialog": false,
            "group": body.key
        };
        let addAction = {
            "form": { "dataSchema": `${body.key}ActionData`, "formSchema": `${body.key}ActionAddForm` },
            "interfaces": [{
                "key": interface1.key,
                "method": 1,
                "idFieldPath": [],
                "path": interface1.path,
                "isRestful": true,
                "description": interface1.description,
                "jpp": _.extend({}, interface1.jpp, { set: {}, del: [] })
            }],
            "key": `${body.key}AddAction`,
            "type": 2,
            "icon": "add",
            "title": `创建${body.title}`,
            "successMsg": null,
            "refreshList": true,
            "closeDialog": true,
            "group": body.key
        };
        let editAction = {
            "form": { "dataSchema": `${body.key}ActionData`, "formSchema": `${body.key}ActionEditForm` },
            "interfaces": [{
                "key": interface1.key,
                "method": 3,
                "idFieldPath": ["/id"],
                "path": interface1.path,
                "isRestful": true,
                "description": interface1.description,
                "jpp": _.extend({}, interface1.jpp, { set: {}, del: [] })
            }],
            "key": `${body.key}EditAction`,
            "type": 2,
            "icon": "add",
            "title": `修改${body.title}`,
            "successMsg": null,
            "refreshList": true,
            "closeDialog": true,
            "group": body.key
        };
        let searchAction = {
            "form": { "dataSchema": `${body.key}ActionData`, "formSchema": `${body.key}ActionSearchForm` },
            "interfaces": [],
            "key": `${body.key}SearchAction`,
            "type": 2,
            "icon": "search",
            "title": `搜索${body.title}`,
            "successMsg": null,
            "refreshList": true,
            "closeDialog": true,
            "group": body.key
        };
        let deleteAction = {
            "confirm": { "confirmContent": "确定要删除吗!" },
            "interfaces": [{
                "key": interface1.key,
                "method": 2,
                "idFieldPath": ["/id"],
                "path": interface1.path,
                "isRestful": true,
                "description": interface1.description,
                "jpp": _.extend({}, interface1.jpp, { set: {}, del: [] })
            }],
            "key": `${body.key}DeleteAction`,
            "type": 4,
            "icon": "delete",
            "title": `删除${body.title}`,
            "successMsg": null,
            "refreshList": true,
            "closeDialog": true,
            "group": body.key
        };

        let schemaData = {
            text: schamaData,
            type: "DATA",
            key: `${body.key}ActionData`,
            group: body.key,
            description: `${body.key}${body.title}表单数据字段描述`
        }

        let schemaAddForm = {
            textForm: schemaFormAdd,
            type: "FORM",
            key: `${body.key}ActionAddForm`,
            group: body.key,
            description: `${body.key}${body.title}新增表单字段描述`
        }
        let schemaEditForm = {
            textForm: schemaFormEdit,
            type: "FORM",
            key: `${body.key}ActionEditForm`,
            group: body.key,
            description: `${body.key}${body.title}更新表单字段描述`
        }
        let schemaSearchForm = {
            textForm: [],
            type: "FORM",
            key: `${body.key}ActionSearchForm`,
            group: body.key,
            description: `${body.key}${body.title}新增搜索字段描述`
        }

        try {
            await db.sequelize.query('delete from `interface` where `group` = $1', {
                transaction: trans,
                bind: [body.key]
            });
            await db.sequelize.query('delete from `schema` where `group` = $1', {
                transaction: trans,
                bind: [body.key]
            });
            await db.sequelize.query('delete from `action` where `group` = $1', {
                transaction: trans,
                bind: [body.key]
            });
            await db.models["interface"].bulkCreate([
                interface1
            ], { validate: true, transaction: trans });
            await db.models["schema"].bulkCreate([
                schemaData,
                schemaAddForm,
                schemaEditForm,
                schemaSearchForm
            ], { validate: true, transaction: trans });
            await db.models["action"].bulkCreate([
                listAction,
                editAction,
                searchAction,
                addAction,
                deleteAction
            ], { validate: true, transaction: trans });

            await trans.commit();
        } catch (e) {
            await trans.rollback();
            console.log(e);
            throw e;
        }

        ctx.body = {
            schamaData: schamaData,
            schemaAddForm: schemaAddForm,
            schemaEditForm: schemaEditForm,
            interface1: interface1,
            deleteAction: deleteAction,
            addAction: addAction,
            editAction: editAction,
            listAction: listAction
        };
    };
};