'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _co = require('co');

var _co2 = _interopRequireDefault(_co);

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _boom = require('boom');

var _boom2 = _interopRequireDefault(_boom);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var opts = {
  encoding: 'utf8'
};

// error pages were inspired by HTML5 Boilerplate's default 404.html page
// https://github.com/h5bp/html5-boilerplate/blob/master/src/404.html
var _404 = _fs2.default.readFileSync(_path2.default.join(__dirname, '..', '404.html'), opts);
var _500 = _fs2.default.readFileSync(_path2.default.join(__dirname, '..', '500.html'), opts);

var debug = new _debug2.default('koa-better-error-handler');

// initialize try/catch error handling right away
// adapted from: https://github.com/koajs/onerror/blob/master/index.js
// https://github.com/koajs/examples/issues/20#issuecomment-31568401
//
// inspired by:
// https://goo.gl/62oU7P
// https://goo.gl/8Z7aMe

exports.default = function () {
  var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(err) {
    var type, val, hasFlash, hasSessions, hasRender, noReferrer;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (err) {
              _context.next = 2;
              break;
            }

            return _context.abrupt('return');

          case 2:

            if (!_lodash2.default.isError(err)) err = new Error(err);

            type = this.accepts(['text', 'json', 'html']);


            if (!type) {
              debug('invalid type, sending 406 error');
              err.status = 406;
              err.message = _boom2.default.notAcceptable().output.payload;
            }

            // parse mongoose validation errors
            err = parseValidationError(this, err);

            // check if we threw just a status code in order to keep it simple
            val = parseInt(err.message, 10);

            if (_lodash2.default.isNumber(val) && val >= 400) err = _boom2.default.create(val);

            // check if we have a boom error that specified
            // a status code already for us (and then use it)
            if (_lodash2.default.isObject(err.output) && _lodash2.default.isNumber(err.output.statusCode)) err.status = err.output.statusCode;

            if (!_lodash2.default.isNumber(err.status)) err.status = 500;

            // check if there is flash messaging
            hasFlash = _lodash2.default.isFunction(this.flash);

            debug('hasFlash', hasFlash);

            // check if there is session support
            hasSessions = _lodash2.default.isObject(this.session) && _lodash2.default.isObject(this.sessionStore) && _lodash2.default.isString(this.sessionId) && _lodash2.default.isObject(this.session) && _lodash2.default.isFunction(this.sessionStore.set);

            debug('hasSessions', hasSessions);

            // check if there is a view rendering engine binding `this.render`
            hasRender = _lodash2.default.isFunction(this.render);

            debug('hasRender', hasRender);

            // check if we're about to go into a possible endless redirect loop
            noReferrer = this.get('Referrer') === '';

            // populate the status and body with `boom` error message payload
            // (e.g. you can do `ctx.throw(404)` and it will output a beautiful err obj)

            this.status = this.statusCode = err.statusCode = err.status = err.status || 500;
            this.body = _boom2.default.create(err.status, err.message).output.payload;

            debug('status code was %d', this.status);

            this.app.emit('error', err, this);

            // nothing we can do here other
            // than delegate to the app-level
            // handler and log.

            if (!(this.headerSent || !this.writable)) {
              _context.next = 25;
              break;
            }

            debug('headers were already sent, returning early');
            err.headerSent = true;
            return _context.abrupt('return');

          case 25:

            // fix page title and description
            this.state.title = this.body.error;
            debug('set `this.state.title` to %s', this.state.title);
            this.state.desc = err.message;
            debug('set `this.state.desc` to %s', this.state.desc);

            debug('type was %s', type);

            _context.t0 = type;
            _context.next = _context.t0 === 'html' ? 33 : _context.t0 === 'json' ? 77 : 80;
            break;

          case 33:

            this.type = 'html';

            if (!(this.status === 404)) {
              _context.next = 51;
              break;
            }

            if (!hasRender) {
              _context.next = 48;
              break;
            }

            _context.prev = 36;

            debug('rendering 404 page');
            _context.next = 40;
            return this.render('404');

          case 40:
            _context.next = 46;
            break;

          case 42:
            _context.prev = 42;
            _context.t1 = _context['catch'](36);

            debug('could not find 404 page, using built-in 404 html');
            this.body = _404;

          case 46:
            _context.next = 49;
            break;

          case 48:
            this.body = _404;

          case 49:
            _context.next = 76;
            break;

          case 51:
            if (!(noReferrer || this.status === 500)) {
              _context.next = 70;
              break;
            }

            // this prevents a redirect loop by detecting an empty Referrer
            // ...otherwise it would reach the next conditional block which
            // would endlessly rediret the user with `this.redirect('back')`
            if (noReferrer) debug('prevented endless redirect loop!');

            // flash an error message
            if (hasFlash) this.flash('error', err.message);

            // render the 500 page

            if (!hasRender) {
              _context.next = 67;
              break;
            }

            _context.prev = 55;

            debug('rendering 500 page');
            _context.next = 59;
            return this.render('500');

          case 59:
            _context.next = 65;
            break;

          case 61:
            _context.prev = 61;
            _context.t2 = _context['catch'](55);

            debug('could not find 500 page, using built-in 500 html');
            this.body = _500;

          case 65:
            _context.next = 68;
            break;

          case 67:
            this.body = _500;

          case 68:
            _context.next = 76;
            break;

          case 70:

            // flash an error message
            if (hasFlash) this.flash('error', err.message);

            // TODO: until the issue is resolved, we need to add this here
            // <https://github.com/koajs/generic-session/pull/95#issuecomment-246308544>

            if (!(this.sessionStore && this.sessionId && this.session && this.state.cookiesKey)) {
              _context.next = 75;
              break;
            }

            _context.next = 74;
            return _co2.default.wrap(this.sessionStore.set).call(this.sessionStore, this.sessionId, this.session);

          case 74:
            this.cookies.set(this.state.cookiesKey, this.sessionId, this.session.cookie);

          case 75:

            /*
            // if we're using `koa-session-store` we need to add
            // `this._session = new Session()`, and then run this:
            await co.wrap(this._session._store.save).call(
              this._session._store,
              this._session._sid,
              JSON.stringify(this.session)
            );
            this.cookies.set(this._session._name, JSON.stringify({
              _sid: this._session._sid
            }), this._session._cookieOpts);
            */

            // redirect the user to the page they were just on
            this.redirect('back');

          case 76:
            return _context.abrupt('break', 83);

          case 77:
            this.type = 'json';
            this.body = (0, _stringify2.default)(this.body, null, 2);
            return _context.abrupt('break', 83);

          case 80:
            this.type = 'text';
            this.body = (0, _stringify2.default)(this.body, null, 2);
            return _context.abrupt('break', 83);

          case 83:

            this.length = Buffer.byteLength(this.body);
            this.res.end(this.body);

          case 85:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this, [[36, 42], [55, 61]]);
  }));

  function errorHandler(_x) {
    return _ref.apply(this, arguments);
  }

  return errorHandler;
}();

function parseValidationError(ctx, err) {

  // inspired by https://github.com/syntagma/mongoose-error-helper
  if (err.name !== 'ValidationError') return err;

  ctx.api = true;

  // loop over the errors object of the Validation Error
  // with support for HTML error lists
  if (_lodash2.default.values(err.errors).length === 1) {
    err.message = _lodash2.default.values(err.errors)[0].message;
  } else {
    var errors = _lodash2.default.map(_lodash2.default.values(err.errors), 'message');
    err.message = ctx.api ? errors.join(', ') : '<ul class="text-xs-left mb-0"><li>' + errors.join('</li><li>') + '</li></ul>';
  }

  return err;
}
//# sourceMappingURL=data:application/json;base64,